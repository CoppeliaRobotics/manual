<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN"><html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-us">
<title>simMIDI Plugin API reference</title>
<link rel="stylesheet" type="text/css" href="../style.css">
<script type="text/javascript">
//
function getParameterByName(name, url = window.location.href)
{
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if(!results) return null;
    if(!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
//
                </script><style type="text/css">
td.section { margin: 0; padding: 0; }
                </style>
</head>
<body>
<div align="center"><table class="allEncompassingTable">
<tr><td id="title" class="section"><h1>simMIDI Plugin API reference</h1></td></tr>
<tr><td id="info" class="section"></td></tr>
<tr><td id="alphabetical" class="section"><pre class="lightGreyBox"><a href="?#closeMidiIn">simMIDI.closeMidiIn</a>
<a href="?#closeMidiOut">simMIDI.closeMidiOut</a>
<a href="?#getMessage">simMIDI.getMessage</a>
<a href="?#ignoreTypes">simMIDI.ignoreTypes</a>
<a href="?#openMidiIn">simMIDI.openMidiIn</a>
<a href="?#openMidiOut">simMIDI.openMidiOut</a>
<a href="?#processIncomingMessages">simMIDI.processIncomingMessages</a>
<a href="?#sendMessage">simMIDI.sendMessage</a>
</pre></td></tr>
<tr><td id="commands" class="section">
<h3 class="subsectionBar">
<a name="closeMidiIn" id="closeMidiIn"></a>simMIDI.closeMidiIn</h3>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simMIDI.closeMidiIn(string inputPortHandle)<br>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua parameters</td>
<td class="apiTableRightLParam"><div>
<strong>inputPortHandle</strong> (string): </div></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">-</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simMIDI.closeMidiIn(string inputPortHandle)<br>
</td>
</tr>
</table>
<br><h3 class="subsectionBar">
<a name="closeMidiOut" id="closeMidiOut"></a>simMIDI.closeMidiOut</h3>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simMIDI.closeMidiOut(string outputPortHandle)<br>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua parameters</td>
<td class="apiTableRightLParam"><div>
<strong>outputPortHandle</strong> (string): </div></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">-</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simMIDI.closeMidiOut(string outputPortHandle)<br>
</td>
</tr>
</table>
<br><h3 class="subsectionBar">
<a name="getMessage" id="getMessage"></a>simMIDI.getMessage</h3>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int[] messageData = simMIDI.getMessage(string inputPortHandle)<br>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua parameters</td>
<td class="apiTableRightLParam"><div>
<strong>inputPortHandle</strong> (string): </div></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet"><div>
<strong>messageData</strong> (table of int): </div></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list messageData = simMIDI.getMessage(string inputPortHandle)<br>
</td>
</tr>
</table>
<br><h3 class="subsectionBar">
<a name="ignoreTypes" id="ignoreTypes"></a>simMIDI.ignoreTypes</h3>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simMIDI.ignoreTypes(string inputPortHandle, bool sysex, bool timing, bool activeSensing)<br>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua parameters</td>
<td class="apiTableRightLParam">
<div>
<strong>inputPortHandle</strong> (string): </div>
<div>
<strong>sysex</strong> (bool): </div>
<div>
<strong>timing</strong> (bool): </div>
<div>
<strong>activeSensing</strong> (bool): </div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">-</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simMIDI.ignoreTypes(string inputPortHandle, bool sysex, bool timing, bool activeSensing)<br>
</td>
</tr>
</table>
<br><h3 class="subsectionBar">
<a name="openMidiIn" id="openMidiIn"></a>simMIDI.openMidiIn</h3>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">string inputPortHandle = simMIDI.openMidiIn(int inputPortIndex)<br>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua parameters</td>
<td class="apiTableRightLParam"><div>
<strong>inputPortIndex</strong> (int): </div></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet"><div>
<strong>inputPortHandle</strong> (string): </div></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">string inputPortHandle = simMIDI.openMidiIn(int inputPortIndex)<br>
</td>
</tr>
</table>
<br><h3 class="subsectionBar">
<a name="openMidiOut" id="openMidiOut"></a>simMIDI.openMidiOut</h3>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">string outputPortHandle = simMIDI.openMidiOut(int outputPortIndex)<br>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua parameters</td>
<td class="apiTableRightLParam"><div>
<strong>outputPortIndex</strong> (int): </div></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet"><div>
<strong>outputPortHandle</strong> (string): </div></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">string outputPortHandle = simMIDI.openMidiOut(int outputPortIndex)<br>
</td>
</tr>
</table>
<br><h3 class="subsectionBar">
<a name="processIncomingMessages" id="processIncomingMessages"></a>simMIDI.processIncomingMessages</h3>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">
                                                    Description
                                                </td>
<td class="apiTableRightDescr">Process incoming messages on given input port, on the specified channels (or all channels) passing the data to the handlers specified in the third argument.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simMIDI.processIncomingMessages(string midiInPortHandle, int[] channels, table funcs)<br>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua parameters</td>
<td class="apiTableRightLParam">
<div>
<strong>midiInPortHandle</strong> (string): handle of a MIDI input device</div>
<div>
<strong>channels</strong> (table of int): a list of MIDI channels, or if nil all channels from 1 to 16 will be used</div>
<div>
<strong>funcs</strong> (table): a map of functions, e.g. {onNoteOn = function(note, velocity) ... end, onNoteOff = function(note, velocity) ... end, onPolyAftertouch = function(note, value) ... end, onControlChange = function(cc, value) ... end, onChannelAftertouch = function(v) ... end, onPitchBend = function(p) ... end, onMessage = function(m1, m2, m3) ... end} all keys are optional</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">-</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simMIDI.processIncomingMessages(string midiInPortHandle, list channels, list funcs)<br>
</td>
</tr>
</table>
<br><h3 class="subsectionBar">
<a name="sendMessage" id="sendMessage"></a>simMIDI.sendMessage</h3>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simMIDI.sendMessage(string outputPortHandle, int[] messageData)<br>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua parameters</td>
<td class="apiTableRightLParam">
<div>
<strong>outputPortHandle</strong> (string): </div>
<div>
<strong>messageData</strong> (table of int): </div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">-</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simMIDI.sendMessage(string outputPortHandle, list messageData)<br>
</td>
</tr>
</table>
<br>
</td></tr>
<tr><td id="enums" class="section"></td></tr>
<tr><td id="structs" class="section"></td></tr>
<tr><td id="scriptFunctions" class="section"></td></tr>
</table></div>
<script type="text/javascript">
//
view = getParameterByName('view')
document.getElementById('alphabetical').style.display = view == 'alphabetical' ? 'table-cell' : 'none'
document.getElementById('commands').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('enums').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('structs').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('scriptFunctions').style.display = view == null ? 'table-cell' : 'none'
//
                </script><link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css">
<script src="../js/hljs/11.8.0/highlight.min.js"></script><script src="../js/hljs/11.8.0/languages/cmake.min.js"></script><script src="../js/hljs/11.8.0/languages/cpp.min.js"></script><script src="../js/hljs/11.8.0/languages/java.min.js"></script><script src="../js/hljs/11.8.0/languages/javascript.min.js"></script><script src="../js/hljs/11.8.0/languages/lua.min.js"></script><script src="../js/hljs/11.8.0/languages/matlab.min.js"></script><script src="../js/hljs/11.8.0/languages/python.min.js"></script><script src="../js/hljs/11.8.0/languages/rust.min.js"></script><script src="../js/hljs/11.8.0/languages/xml.min.js"></script><script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>
</html>
