<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>The main client application</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>CoppeliaSim's library</h1>

<p>CoppeliaSim offers a wide range of functionality via its graphical user interface. For more customized scenarios where fine-grained control of the simulation loop is required (e.g. reinforcement learning), it also offers the flexibility to be used as a library within custom programs.</p>

<p>Using CoppeliaSim as a library consists in loading the CoppeliaSim's library (regular or headless library):</p>
        <li>Windows: <code>LoadLibrary("coppeliaSim.dll")</code> / <code>LoadLibrary("coppeliaSimHeadless.dll")</code></li>
        <li>Linux: <code>dlopen("libcoppeliaSim.so")</code> / <code>dlopen("libcoppeliaSimHeadless.so")</code></li>
        <li>macOS: <code>dlopen("libcoppeliaSim.dylib")</code> / <code>dlopen("libcoppeliaSimHeadless.dylib")</code></li>

<p>then creating a secondary thread (the simulation thread), and:</p>
        <li>calling <code>simInitialize</code> to initialize.</li>
        <li>calling any other API functions, and/or calling <code>simLoop</code> until <code>simGetExitRequest</code> returns false</li>
        <li>calling <code>simDeinitialize</code> before termination.</li>

<p>Finally, in the main thread (the UI thread), calling <code>simRunGui</code>. Argument to <code>simRunGui</code> can be used to toggle on/off individual part of the interface (use <code>sim_gui_all</code> to enable all), or to run in <em>GUI suppression mode</em> (<code>sim_gui_headless</code>).</p>



<p>When using the headless library, there is no need to create a secondary thread, or call <code>simRunGui</code></p>

<a name="cppClient"></a>
<h1>C++ client</h1>


<p>The default main client application that comes with the installation package is a C++ application:  <a href="https://github.com/CoppeliaRobotics/coppeliaSimClient" target="_blank"><em>coppeliaSimClient</em></a>, but also available in <em>&lt;CoppeliaSim folder&gt;/programming/</em>. It compiles to <em>coppeliaSim.exe</em> (Windows), or <em>coppeliaSim</em> (macOSX and Linux).</p>


<a name="pythonClient"></a>
<h1>Python client</h1>

<p>A complete working example of loading the CoppeliaSim library in Python is given in <a href="https://github.com/CoppeliaRobotics/coppeliaSimClientPython" target="_blank">coppeliaSimClientPython</a>, but also available in <em>&lt;CoppeliaSim folder&gt;</em>. From your command line:</p>

<code class="hljs coppelia-terminal">$ python3 ./coppeliaSim.py --help     (display run options)    
$ python3 ./coppeliaSim.py            (run CoppeliaSim with GUI and local coppeliaSim lib)
$ python3 ./coppeliaSim.py -O=0       (run CoppeliaSim with minimalistic GUI and local coppeliaSim lib)
$ python3 ./coppeliaSim.py -h         (run CoppeliaSim with emulated headless mode and local coppeliaSim lib)
$ python3 ./coppeliaSim.py -H         (run CoppeliaSim with true headless mode and local coppeliaSimHeadless lib)
$ python3 ./coppeliaSim.py -L &lt;path/to/CoppeliaSim/library&gt;   (run CoppeliaSim with specific lib)</code>

<p>In this section, relevant parts are explained.</p>

<h2>Initialization</h2>

<p>Module <code>coppeliasim.lib</code> handles the load and setup of core functions (<code>simInitialize</code>, <code>simDeinitialize</code>, etc...) via <code>ctypes</code>.</p>

<code class="hljs language-python coppelia-coppeliasim-client">import builtins
import threading

# set the path to the coppeliaSim's library:
builtins.coppeliasim_library = "/path/to/libcoppeliaSim.so"

# import the coppeliaSim's library functions:
from coppeliasim.lib import *

# start the sim thread (see in the next section)
if trueHeadless:
    simThreadFunc()
else:
    t = threading.Thread(target=simThreadFunc)
    t.start()
    simRunGui(sim_gui_all) # use sim_gui_headless for headless mode
    t.join()</code>

<h2>SIM thread loop</h2>

<p>The basic implementation of simThreadFunc simply executes the application until quit is requested:</p>

<code class="hljs language-python coppelia-coppeliasim-client">def simThreadFunc():
    simInitialize(appDir().encode('utf-8'), 0)
    while not simGetExitRequest():
        simLoop(None, 0)
    simDeinitialize()</code>

<p>Another possible scenario would be to manually control the operations used to setup a simulation environment (e.g. <code>sim.loadScene</code>) and to execute a simulation, e.g. by manually stepping for a predetermined amount of steps:</p>

<code class="hljs language-python coppelia-coppeliasim-client">def simThreadFunc():
    simInitialize(appDir().encode('utf-8'), 0)

    # script bridge, see next section
    import coppeliasim.bridge
    coppeliasim.bridge.load()

    global sim
    sim = coppeliasim.bridge.require('sim')

    sim.loadScene('path/to/scene.ttt')
    simStart()
    for i in range(1000):
        t = sim.getSimulationTime()
        print(f'Simulation time: {t:.2f} [s] (running in stepped mode)')
        simStep()
    simStop()

    simDeinitialize()

def simStart():
    if sim.getSimulationState() == sim.simulation_stopped:
        sim.startSimulation()

def simStep():
    if sim.getSimulationState() != sim.simulation_stopped:
        t = sim.getSimulationTime()
        while t == sim.getSimulationTime():
            simLoop(None, 0)

def simStop():
    while sim.getSimulationState() != sim.simulation_stopped:
        sim.stopSimulation()
        simLoop(None, 0)</code>

<h2>coppeliasim.bridge</h2>

<p>The <code>coppeliasim.bridge</code> module provides seamless access to the regular API used by scripts.</p>

<p>Instead of <code>moduleName = require('moduleName')</code>, use <code>moduleName = coppeliasim.bridge.require('moduleName')</code>.</p>

<p>All other API functions can be used normally.</p>

<p>Example:</p>

<code class="hljs language-python coppelia-coppeliasim-client">import coppeliasim.bridge

# load the bridge component:
coppeliasim.bridge.load()

# fetch API objects:
sim = coppeliasim.bridge.require('sim')

# call some API function:
program_version = sim.getIntProperty(sim.handle_app, 'productVersionNb')</code>

<h3>Callbacks</h3>

<p>Some regular API functions use callbacks, i.e. they take a function parameter, and call it one or more time during the execution of the function or at a later time. Examples are <a href="#">sim.moveToConfig</a>, <a href="#">simIK.findConfigs</a>, <a href="#">simOMPL.setStateValidationCallback</a>, etc...</p>

<p>To use Python functions as callbacks, those need to be exposed as C functions, and called via CoppeliaSim's C function wrapper.</p>

<p>A C callback function is called with an <code>int</code> argument being the handle of the stack containing input/output arguments, and has to return an <code>int</code>, nonzero in case of success, e.g.:</p>

<code class="hljs language-python coppelia-coppeliasim-client">
def myCallback(stackHandle):
    # use CoppeliaSim stack API to read input args, e.g.:
    doubleValue = ctypes.c_double()
    if simGetStackDoubleValue(stackHandle, ctypes.byref(doubleValue)) != 1:
        print('error in reading double from stack')
        # return 0 for error:
        return 0
    doubleValue = doubleValue.value
    simPopStackItem(stackHandle, 1)
    # and so on...

    # use CoppeliaSim stack API to write return values
    simPushInt32OntoStack(stackHandle, 42)
    stringRetVal = 'xyz'
    simPushTextOntoStack(stackHandle, stringRetVal)

    # return 1 for success:
    return 1
</code>

<p>for convenience, a <code>coppeliasim.stack.callback</code> decorator can be used, which automatically performs reading input arguments from stack and writing return values to stack for most common types, also handling of exceptions:</p>

<code class="hljs language-python coppelia-coppeliasim-client">
import coppeliasim.stack

@coppeliasim.stack.callback
def myCallback(arg1, arg2, arg3):
    print('myCallback called with args:', arg1, arg2, arg3)
    ret1, ret2 = 42, 'xyz'
    print('myCallback returning:', ret1, ret2)
    return ret1, ret2
</code>

<p>In both cases, the callback has to be registered with <code>simRegCallback</code>:</p>

<code class="hljs language-python coppelia-coppeliasim-client">
from ctypes import CFUNCTYPE, c_int

# signature is always int(int), i.e. the undecorated callback:
myCallback_c = CFUNCTYPE(c_int, c_int)(myCallback)

# note: maintain a reference to above variable for the whole lifetime
#       of the application, otherwise it will be garbage collected and
#       it will crash when called by C

# callback with index 0 will be available under the name 'ccallback0':
simRegCallback(0, myCallback_c)
</code>

<p>The callback can be referenced by the name 'ccallback0' (or 'ccallback1' and so on...) and called by e.g. <code>sim.callScriptFunction('ccallback0', sim.scripttype_sandbox, 0.25, 400, 'str')</code> or passed to API functions and plugins that accept (Lua) callbacks.</p>

<p>Refer to <a href="https://github.com/CoppeliaRobotics/coppeliaSimClientPython/blob/main/coppeliaSim.py" target="_blank">coppeliaSimClientPython/coppeliaSim.py</a> for the complete code.</p>


<br>
<br>
 </tr>
</table> 
</div>  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
  
</body>

</html>
