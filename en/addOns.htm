<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html><head>
<meta http-equiv="Content-Language" content="en-us">

<title>Add-ons</title><link rel="stylesheet" type="text/css" href="../style.css"></head>


<body>

<div align="center">
<table class="allEncompassingTable">
 <tbody><tr>
  <td>
<p><a href="../index.html" target="_top"><img src="images/homeImg.png"></a></p>



<h1>Add-ons</h1>

<p>An add-on is a <a href="scripts.htm">script</a> running in CoppeliaSim, that can act in a similar way as a <a href="plugins.htm">plugin</a>:
it is automatically loaded at program start-up, and allows CoppeliaSim's
functionality to be extended by user-written functionality or
functions; it persists across all opened scenes, and is executed
constantly, effectively running in the
background. Add-ons can run <a href="threadedAndNonThreadedCode.htm">threaded or non-threaded</a>, should be segmented into several <a href="callbackFunctions.htm#systemCallbacks">system callback functions</a>, and follow a precise<a href="scriptExecution.htm"> execution order </a>in relation to other script types. They share a lot of properties with <a href="sandboxScript.htm">the sandbox</a>. Add-ons can be accessed via [Menu bar &gt; Modules].</p>
<p>Add-ons should be written in a text file located in <em>&lt;CoppeliaSim folder&gt;/addOns/</em>  directory, with the extension indicating the language (<em>&lt;name.py&gt;</em> or <em>&lt;name.lua</em>&gt;). Other add-ons can still be loaded and run via <a href="commandLine.htm">command line options</a>.</p>
<p>By default, add-ons will automatically start when CoppeliaSim starts, e.g.:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_init():
    print(&quot;Executing the initialization section. Starting together with CoppeliaSim&quot;)

def sysCall_addOnScriptSuspend():
    print(&quot;Ending... (triggered by the user)&quot;)
    return {'cmd': 'cleanup'} # end this add-on. The cleanup section will be called

def sysCall_cleanup():
    print(&quot;Executing the clean-up section&quot;)</code>  

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    print(&quot;Executing the initialization section. Starting together with CoppeliaSim&quot;)
end

function sysCall_addOnScriptSuspend()
    print(&quot;Ending... (triggered by the user)&quot;)
    return {cmd='cleanup'} -- end this add-on. The cleanup section will be called
end

function sysCall_cleanup()
    print(&quot;Executing the clean-up section&quot;)
end</code>  

</div>
<br>
<p>An add-on can also be manually started and stopped from the add-on menu, e.g.:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

'''luaExec
-- Here we have a special Lua section:
function sysCall_info()
    return {autoStart = false}
end
'''

def sysCall_init():
    print(&quot;Executing the initialization section. Start triggered by the user&quot;)

def sysCall_addOnScriptSuspend():
    print(&quot;Ending... (triggered by the user)&quot;)
    return {'cmd': 'cleanup'} # end this add-on.</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_info()
    return {autoStart = false}
end

function sysCall_init()
    print(&quot;Executing the initialization section. Start triggered by the user&quot;)
end

function sysCall_addOnScriptSuspend()
    print(&quot;Ending... (triggered by the user)&quot;)
    return {cmd = 'cleanup'} -- end this add-on.
end</code>
</div>

<br>
<p>An add-on can also be suspended/resumed from the add-on menu, e.g.:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

...

def sysCall_addOnScriptSuspend():
    print(&quot;Suspending the add-on... (triggered by the user)&quot;)

def sysCall_addOnScriptResume():
    print(&quot;Resuming the add-on... (triggered by the user)&quot;)

...</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

...

function sysCall_addOnScriptSuspend()
    print(&quot;Suspending the add-on... (triggered by the user)&quot;)
end

function sysCall_addOnScriptResume()
    print(&quot;Resuming the add-on... (triggered by the user)&quot;)
end

...</code>

</div>


<br>
<p>An add-on can also act as a simple function triggered by the user, e.g.:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

'''luaExec
-- Here we have a special Lua section:
function sysCall_info()
    return {autoStart = false}
end
'''

def sysCall_init():
    print(&quot;Executing the initialization section. Start triggered by the user&quot;)
    # execute some functions here, e.g. import something
    return {'cmd': 'cleanup'} # end this add-on.</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_info()
    return {autoStart = false}
end

function sysCall_init()
    print(&quot;Executing the initialization section. Start triggered by the user&quot;)
    -- execute some functions here, e.g. import something
    return {cmd = 'cleanup'} -- end this add-on.
end</code>

</div>
<br>
<p>An add-on can also display a customized name in the Modules' menu, e.g.:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

'''luaExec
-- Here we have a special Lua section:
function sysCall_info()
    return {menu: 'Exporters\nMy exporter'}
end
'''

def sysCall_init():
    ...</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_info()
    return {menu = 'Exporters\nMy exporter'}
end

function sysCall_init()
    ...
end</code>

</div>

<br>
<br>
 </td></tr>
</tbody></table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body></html>
