<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Threaded and non-threaded script code</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Threaded and non-threaded script code</h1>

<p>Any type of script can run <a href="#threaded">threaded</a> and/or <a href="#nonThreaded">non-threaded</a> script functions. </p>

<h2>
<a name="nonThreaded"></a>Non-threaded code
</h2>

<p>The entrance to a script is always originating from <a href="callbackFunctions.htm">callback functions</a> which are not running threaded, and should not be blocking. This means that every time they are called, they should perform some task and then return control. If control is not returned, then CoppeliaSim will halt. </p>
<p>Non-threaded code is inherently synchronized  with the simulation loop:</p>
<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_init():
    sim = require('sim')

def sysCall_sensing():
    print('simulation time:', sim.getSimulationTime())</code>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    sim = require('sim')
end

function sysCall_sensing()
    print('simulation time: ', sim.getSimulationTime())
end</code>
</div>


<h2>
<a name="threaded"></a>Threaded code
</h2>


<p>Threaded scripts on the other hand allow running blocking code, without halting CoppeliaSim: the code is in fact preemtively interrupted and later resumed on a regular basis by CoppeliaSim, by default.</p>

<p>Threaded code runs non-blocking (or in non-stepping mode) by default:</p>
<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_init():
    sim = require('sim')

def sysCall_thread():
    while not sim.getSimulationStopping():
        print('simulation time:', sim.getSimulationTime())</code>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    sim = require('sim')
end

function sysCall_thread()
    while not sim.getSimulationStopping() do
        print('simulation time: ', sim.getSimulationTime())
    end
end</code>
</div>
<p>This behaviour can be changed via <a href="sim/simSetStepping.htm">sim.setStepping</a>, which then requires explicit yielding via <a href="sim/simStep.htm">sim.step</a>:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_init():
    sim = require('sim')
    sim.setStepping(True)  # enable the stepping mode (no more preemptive yielding from CoppeliaSim)

def sysCall_thread():
    while not sim.getSimulationStopping():
        print('simulation time:', sim.getSimulationTime())
        sim.step()  # resume in the next simulation step</code>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    sim = require('sim')
    sim.setStepping(true) -- enable the stepping mode (no more preemtive yielding from CoppeliaSim) 
end

function sysCall_thread()
    while not sim.getSimulationStopping() do
        print('simulation time: ', sim.getSimulationTime())
        sim.step() -- resume in next simulation step
    end
end</code>
</div>

<p>Above while loop will now execute exactly once for each main simulation step and not waste time reading and printing the simulation time over and over for the same simulation step: once the current thread has yielded control back to CoppeliaSim via <a href="sim/simStep.htm">sim.step</a>, it will resume next time the thread is resumed, which is in next simulation step.</p>

<p>Several <a href="apiFunctions.htm#blockingFunctions">blocking functions</a> are specifically meant to be running from within threaded code, e.g. <a href="sim/simMoveToConfig.htm">sim.moveToConfig</a> or <a href="sim/simMoveToPose.htm">sim.moveToPose</a>: those functions handle thread yielding for you, at the appropriate time.</p>

<p>Refer also to the <a href="simulation.htm#stepping">stepping mode</a>, and to <a href="apiFunctions.htm#threads">the other thread-related API functions</a>.</p>


<br>
<br>
 </tr>
</table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
