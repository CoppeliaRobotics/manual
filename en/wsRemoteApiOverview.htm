<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>WebSocket remote API</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>WebSocket remote API</h1>

<p>The WebSocket remote API is one of <a href="meansOfCommunication.htm">several ways an application can connect with CoppeliaSim</a>.</p>

<p>The WebSocket remote API allows to control a simulation (or the simulator itself) from an external JavaScript application or remote client/server, via WebSocket. It offers all API functions also available via a CoppeliaSim script: this includes all <a href="apiFunctions.htm">regular API functions</a> (i.e. sim.* -type functions), but also all API functions provided by <a href="plugins.htm">plugins</a> (e.g. simOMPL.*, simUI.*, simIK.*, etc.). The WebSocket remoteAPI represents a very thin wrapper around mentioned API functions, and can be used in a very similar way as from within a CoppeliaSim script.</p>
<p>The WebSocket remote API functions are interacting with CoppeliaSim via WebSocket and its <a href="simWS/simWS.htm">interface plugin</a> to CoppeliaSim and the WS remote API <a href="addOns.htm">add-on</a>. All this happens in a hidden fashion to the user. The remote API can let one or several external applications interact with CoppeliaSim in a <a href="simulation.htm#stepped">stepping</a> (i.e. <em>synchronized</em> with each simulation step) or non-stepping way (i.e. the normal operation mode), and even remote control of the simulator is supported (e.g. remotely loading a scene, starting, pausing or stopping a simulation for instance).</p>

<p>Here a very simple WebSocket remote API example:</p>
<code class="hljs language-js coppelia-ws-remote-api-client">const log = (what) =&gt; $('#log').append(`${what}\n`);
(async () =&gt; {
    var client = new RemoteAPIClient('localhost', 23050, 'json');
    log('Connecting...');
    await client.websocket.open();
    log('Getting proxy object "sim"...');
    var sim = await client.require('sim');
    log('Calling sim.getObject("/Floor")...');
    var [h] = await sim.getObject('/Floor');
    log(`Result: ${h}`);
})();
</code>

<p>See programming/wsRemoteApi folder or <a href="https://github.com/CoppeliaRobotics/wsRemoteApi" target="_blank">its related repository</a> for examples.</p>
<br>


<br>
<br>
 </tr>
 <tr>
   <td > 
 </tr>
</table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
