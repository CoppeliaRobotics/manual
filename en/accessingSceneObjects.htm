<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Accessing objects programmatically</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Accessing scene objects programmatically</h1>

<p>When programming in and around CoppeliaSim, you will always need to reference <a href="objects.htm">scene objects</a>. You do this with handles, that you obtain via <a href="sim/simGetObject.htm">sim.getObject</a>, which expects an object path as input argument. The object path can be expressed in an absolute manner, but also in a relative manner in case of <a href="#fromScriptObject">script object code</a>.</p>

<p>In both cases, the path to the object can often be simplified. You may also use wildcards, and optionally specify the object sequence or order, in a given scene hierarchy. Or simply fetch the n-th object that matches a specific path/alias.</p>


<br>
<br>


<h2><a name="fromUnassociatedCode"></a>Access from <em>unassociated</em> code</h2>

<p><em>Unassociated</em> code is code that is not from a <a href="scriptObjects.htm">script object</a>. This includes all the code written for <a href="plugins.htm">plugins</a>, <a href="addOns.htm">add-ons</a>, <a href="remoteApiOverview.htm">remote API</a> clients, external <a href="rosInterfaces.htm">ROS</a> nodes, and <a href="mainScript.htm">the main script</a>.</p>

<p>In that case, you simply specify the object's <strong>absolute</strong> path, in order to retrieve its handle. If the object alias is unique, the path to the object can be simplified. You may also use wildcards, and optionally specify the object sequence in a given scene hierarchy. Or simply fetch the n-th object that matches a specific path:</p>

<code class="hljs language-c++ coppelia-coppeliasim-plugin">// e.g. from within a c/c++ plugin:

// using the full <em>Object</em> path:
int objectHandle = simGetObject(&quot;/Path/to/Object&quot;, -1, -1, 0);

// if object has unique alias <em>Object</em>:
int objectHandle = simGetObject(&quot;/Object&quot;, -1, -1, 0); 

// handle of the first object with alias <em>Robot</em>, in a given hierarchy level:
int robotHandle = simGetObject(&quot;/Robot[0]&quot;, -1, -1, 0);
 
// handle of the second object with alias <em>Robot</em>, in a given hierarchy level:
int robotHandle = simGetObject(&quot;/Robot[1]&quot;, -1, -1, 0);

// handle of the fifth object with alias <em>Robot</em>, in the scene:
int robotHandle = simGetObject(&quot;/Robot{4}&quot;, -1, -1, 0);
// or
int robotHandle = simGetObject(&quot;/Robot&quot;, 4, -1, 0);

// find all objects starting with alias prefix <em>Mobile</em>:
int i = 0;
while (true)
{
    int objectHandle = simGetObject(&quot;/Mobile*&quot;, i++, -1, 1);
    if (objectHandle &lt; 0)
        break;
} </code>

<code class="hljs language-python coppelia-zmq-remote-api-client"># e.g. from within a Python ZeroMQ remote API client:

# using the full <em>Object</em> path:
objectHandle = sim.getObject(&quot;/Path/to/Object&quot;)

# if object has unique alias <em>Object</em>:
objectHandle = sim.getObject(&quot;/Object&quot;)

# handle of the first object with alias <em>Robot</em>, in a given hierarchy level:
robotHandle = sim.getObject(&quot;/Robot[0]&quot;) 

# handle of the second object with alias <em>Robot</em>, in a given hierarchy level:
robotHandle = sim.getObject(&quot;/Robot[1]&quot;) 

# handle of the fifth object with alias <em>Robot</em>, in the scene:
robotHandle = sim.getObject(&quot;/Robot{4}&quot;)</code>

<br>
<br>

<h2>
<a name="fromScriptObject"></a><a name="fromAssociatedCode"></a>Access from a script object (i.e. from <em>associated</em> code)
</h2>

<p><em>Associated</em> code is code that runs in a <a href="scriptObjects.htm">script object</a>, i.e. code that runs in a <a href="simulationScripts.htm">simulation-</a> or <a href="customizationScripts.htm">customization script</a>.</p>

<p>In that case, objects can also be accessed in an <strong>absolute</strong> manner as described above, but additionally, object access can also happen in a <strong>relative</strong> manner (relative to the current script object (<em> ./ </em>), or relative to the model containing current script ( <em>:/</em> ) ):</p>



<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

# from within a simulation- or customization script:

# returns the current script's handle:
objectHandle = sim.getObject(&quot;.&quot;) 

# returns the parent of this script:
parentHandle = sim.getObject(&quot;..&quot;) 

# returns the model this script is contained in:
modelHandle = sim.getObject(&quot;:&quot;) 

# returns the parent model this script is contained in:
parentModelHandle = sim.getObject(&quot;::&quot;) 

# returns the first object in the current hierarchy, that starts with <em>Object</em>:
objectHandle = sim.getObject(&quot;./Object*&quot;) 

# returns the first object with alias <em>Object</em>, in the current model hierarchy:
objectHandle = sim.getObject(&quot;:/Object&quot;) 

# returns the 4th object with alias <em>Leg</em>, within a same hierarchy level, in the current model hierarchy:
legHandle = sim.getObject(&quot;:/Leg[3]&quot;) 

# returns the 5th object with alias <em>Leg</em>, in the current model hierarchy:
legHandle = sim.getObject(&quot;:/Leg{4}&quot;) 

# parse through all <em>Leg</em> objects in the current model hierarchy:
i = 0
while True:
    legHandle = sim.getObject(&quot;:/Leg&quot;, {'index': i, 'noError': True})
    if legHandle &lt; 0:
        break
    i = i + 1

# returns the first object with alias <em>Object</em>, in the hierarchy of <em>anotherObject</em>:
local objectHandle = sim.getObject(&quot;./Object&quot;, {'proxy': anotherObject}) </code>


<code class="hljs language-lua coppelia-coppeliasim-script">--lua

# from within a simulation- or customization script:

-- returns the current script's handle:
local objectHandle = sim.getObject(&quot;.&quot;) 

-- returns the parent of this script:
local parentHandle = sim.getObject(&quot;..&quot;) 

-- returns the model this script is contained in:
local modelHandle = sim.getObject(&quot;:&quot;) 

-- returns the parent model this script is contained in:
local parentModelHandle = sim.getObject(&quot;::&quot;) 

-- returns the first object in the current hierarchy, that starts with <em>Object</em>:
local objectHandle = sim.getObject(&quot;./Object*&quot;) 

-- returns the first object with alias <em>Object</em>, in the current model hierarchy:
local objectHandle = sim.getObject(&quot;:/Object&quot;) 

-- returns the 4th object with alias <em>Leg</em>, within a same hierarchy level, in the current model hierarchy:
legHandle = sim.getObject(&quot;:/Leg[3]&quot;) 

-- returns the 5th object with alias <em>Leg</em>, in the current model hierarchy:
legHandle = sim.getObject(&quot;:/Leg{4}&quot;) 

-- parse through all <em>Leg</em> objects in the current model hierarchy:
local i = 0
while true do
    local legHandle = sim.getObject(&quot;:/Leg&quot;, {index = i, noError = true})
    if legHandle &lt; 0 then
        break
    end
    i = i + 1
end

-- returns the first object with alias <em>Object</em>, in the hierarchy of <em>anotherObject</em>:
local objectHandle = sim.getObject(&quot;./Object&quot;, {proxy = anotherObject})</code>


</div>


<br>
<br>
 </tr>
 <tr>
   <td > 
 </tr>
</table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
