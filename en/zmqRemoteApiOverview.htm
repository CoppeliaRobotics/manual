<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>ZeroMQ remote API</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>ZeroMQ remote API</h1>

<p>The ZeroMQ remote API is one of <a href="meansOfCommunication.htm">several ways an application can connect with CoppeliaSim</a>.</p>

<p>The ZeroMQ remote API allows to control a simulation (or the simulator itself) from an external application or a remote hardware (e.g. real robot, remote computer, etc.). It offers all API functions also available via a CoppeliaSim script: this includes all <a href="apiFunctions.htm">regular API functions</a> (i.e. sim.* -type functions), but also all API functions provided by <a href="plugins.htm">plugins</a> (e.g. simOMPL.*, simUI.*, simIK.*, etc.), if enabled.</p>
<p>The ZeroMQ remote API functions are interacting with CoppeliaSim via <a href="http://api.zeromq.org/" target="_blank">ZeroMQ</a> and its <a href="simZMQ/simZMQ.htm">interface plugin</a> to CoppeliaSim and the ZMQ remote API <a href="addOns.htm">add-on</a>. All this happens in a hidden fashion to the user. The remote API can let one or several external applications interact with CoppeliaSim in a <a href="simulation.htm#stepped">stepping</a> (i.e. <em>synchronized</em> with each simulation step) or non-stepping way (i.e. the normal operation mode), and even remote control of the simulator is supported (e.g. remotely loading a scene, starting, pausing or stopping a simulation for instance).</p>

<p>See programming/zmqRemoteApi folder or <a href="https://github.com/CoppeliaRobotics/zmqRemoteApi" target="_blank">its related repository</a> for examples.</p>
<br>

<h2><a name="python"></a>Python client</h2>
<p>Install client package:</p>
<code class="hljs coppelia-terminal">$ python3 -m pip install coppeliasim-zmqremoteapi-client</code>
<p>(the ZeroMQ and CBOR dependencies will be automatically installed with the above command).</p>

<p>Following is a very simple example ZeroMQ remote API client code, which starts then runs a <a href="simulation.htm#stepped">stepping</a> simulation for 3 seconds:</p>
<code class="hljs language-python coppelia-zmq-remote-api-client">from coppeliasim_zmqremoteapi_client import RemoteAPIClient

client = RemoteAPIClient()
sim = client.require('sim')

sim.setStepping(True)

sim.startSimulation()
while (t := sim.getSimulationTime()) &lt; 3:
    print(f'Simulation time: {t:.2f} [s]')
    sim.step()
sim.stopSimulation()</code>


<br>

<h2><a name="cpp"></a><a name="c++"></a>C++ client</h2>
<p>Any C++ client requires the <a href="https://github.com/danielaparker/jsoncons" target="_blank">jsoncons</a> and <a href="https://github.com/zeromq/cppzmq" target="_blank">cppzmq</a> package: those are automatically downloaded and used when compiling via cmake. The boost and ZMQ libraries need to be installed. For details see <em>programming/zmqRemoteApi/clients/cpp/</em>, which contains several examples.</p>
<p> Build them with:</p>
<code class="hljs coppelia-terminal">$ mkdir build
$ cd build
$ cmake ..
$ cmake --build . --config Release</code>


<br>




<p>Following is a very simple C++ ZeroMQ remote API client code, which starts then runs a <a href="simulation.htm#stepped">stepping</a> simulation for 3 seconds:</p>
<code class="hljs language-c++ coppelia-zmq-remote-api-client">#include "RemoteAPIClient.h"

int main(int argc,char* argv[])
{
    RemoteAPIClient client;
    auto sim = client.getObject().sim();

    sim.setStepping(true);

    sim.startSimulation();
    double t = 0.0;
    do
    {
        t = sim.getSimulationTime();
        printf("Simulation time: %.2f [s]\n", t);
        sim.step();
    } while (t &lt; 3.0);
    sim.stopSimulation();
    return(0);
}</code>


<br>

<h2><a name="java"></a>Java client</h2>
<p>Any Java client requires <a href="https://maven.apache.org/index.html" target="_blank">Apache Maven</a>. For details see <em>programming/zmqRemoteApi/clients/java/src/main/java</em>, which contains several examples.</p>
<p> Make sure that your folder names do not contain any spaces, and have CoppeliaSim running (API function are fetched from CoppeliaSim). Build with:</p>
<code class="hljs coppelia-terminal">$ export COPPELIASIM_ROOT_DIR=path/to/CoppeliaSim/exec/folder/or/resources/folder/on/macOS
$ cd zmqRemoteApi/clients/java
$ mvn package -D&quot;GENERATE_INCLUDE_OBJECTS=sim,simIK&quot;</code>


<br>




<p>In above, only the sim and simIK namespaces are considered, you may add more when needed. Following is a very simple Java ZeroMQ remote API client code, which starts then runs a <a href="simulation.htm#stepped">stepping</a> simulation for 3 seconds:</p>
<code class="hljs language-java coppelia-zmq-remote-api-client">import java.util.Arrays;

import com.coppeliarobotics.remoteapi.zmq.*;

public class Example
{
    public static void main(String[] _args) throws java.io.IOException, co.nstant.in.cbor.CborException
    {
        var client = new RemoteAPIClient();
        var sim = client.getObject().sim();

        sim.setStepping(true);
        sim.startSimulation();

        double simTime = 0.0;
        while((simTime = sim.getSimulationTime()) &lt; 3)
        {
            System.out.printf("Simulation time: %.2f [s]%n", simTime);
            sim.step();
        }
        sim.stopSimulation();
    }
}</code>


<br>

<h2><a name="matlab"></a><a name="octave"></a>Matlab &amp; Octave clients</h2>
<p>Matlab clients require the bundled <a href="https://github.com/zeromq/jeromq" target="_blank">JeroMQ</a>, which installs automatically if not yet present.</p>
<p>Octave clients require Octave 6.4+, the octave communications and zeromq packages. Those can be installed with:</p>
<code class="hljs coppelia-terminal">pkg install -forge communications
pkg install -forge zeromq</code>


<br>

<p>Following is a very simple Matlab/Octave ZeroMQ remote API client code, which starts then runs a <a href="simulation.htm#stepped">stepping</a> simulation for 3 seconds:</p>
<code class="hljs language-matlab coppelia-zmq-remote-api-client">client = RemoteAPIClient();
sim = client.require('sim');

sim.setStepping(true);

sim.startSimulation();
while true
    t = sim.getSimulationTime();
    if t &gt;= 3; break; end
    fprintf('Simulation time: %.2f [s]\n', t);
    sim.step();
end
sim.stopSimulation();</code>


<br>

<h2><a name="lua"></a>Lua client</h2>
<p>Currently, a Lua client is only supported from within a CoppeliaSim script, e.g. in order to connect 2 or more CoppeliaSim instances.</p>
<p>Following is a very simple Lua ZeroMQ remote API client code, which synchronizes the simulation steps with another CoppeliaSim instance:</p>
<code class="hljs language-lua coppelia-zmq-remote-api-client">function sysCall_init()
    remoteApiClient = require('luaZmqRemoteApi')
    remoteApiClient.init('127.0.0.1', 23002)
    simx = remoteApiClient.getObject('sim')

    remoteApiClient.setStepping(true)
    simx.startSimulation()
end

function sysCall_sensing()
    remoteApiClient.step()
end

function sysCall_cleanup()
    simx.stopSimulation()
    remoteApiClient.cleanup()
end</code>

<br>

<h2><a name="rust"></a>Rust client</h2>
<p>The <a href="https://github.com/samuel-cavalcanti/rust_zmqRemoteApi" target="_blank">Rust ZeroMQ remote API</a> is courtesy of Samuel Cavalcanti. Following is a very simple example ZeroMQ remote API client code, which starts then runs a <a href="simulation.htm#stepped">stepping</a> simulation for 3 seconds:</p>
<code class="hljs language-rust coppelia-zmq-remote-api-client">use std::rc::Rc;
use zmq_remote_api::{sim::Sim, RemoteAPIError, RemoteApiClientParams};

/*
    Example based on Example.cpp
*/

fn main() -&gt; Result&lt;(), RemoteAPIError&gt; {
    // use the env variable RUST_LOG="trace" or RUST_LOG="debug" to observe the zmq communication
    env_logger::init();

    let client = zmq_remote_api::RemoteApiClient::new(RemoteApiClientParams {
        host: "localhost".to_string(),
        ..RemoteApiClientParams::default()
    })?;

    // Rc means Reference counter, is a smart pointer that counter the number of references
    let client = Rc::new(client);
    let sim = Sim::new(client.clone());

    client.set_stepping(true)?;

    sim.start_simulation()?;

    let mut time = sim.get_simulation_time()?;

    while time &lt; 3.0 {
        println!("Simulation time: {:.3} [s]", time);
        client.step(true)?;
        time = sim.get_simulation_time()?;
    }

    sim.stop_simulation()?;

    Ok(())
}</code>


<br>
<br>


<br>
<br>
 </tr>
 <tr>
   <td>
 </tr>
</table>
</div>


<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
