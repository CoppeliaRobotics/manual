<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>data manipulation/transformation</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Data manipulation/transformation</h1>

<p>Data in CoppeliaSim can transformed in various ways:</p>

<li><a href="#packing">data packing/unpacking</a></li>
<li><a href="#algebra">linear algebra functionality</a></li>
<li><a href="syntheticVision.htm">image processing</a></li>
<li><a href="apiFunctions.htm#paths">path data transformation</a></li>
<li><a href="sim/simTransformBuffer.htm">sim.transformBuffer</a></li>
<li>other <a href="apiFunctions.htm#coordinatesAndTransformations">matrix/transformation related functions</a></li>

<p><a name="packing"></a>Following example illustrates how to pack/unpack data. Other functions can be found here:</p>
  
<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

# Refer to the various Python packages, e.g.:
import struct
import base64
import cbor2 as cbor

# One can also use some built-in functions:
base64Buffer = sim.transformBuffer(binaryPackedData, sim.buffer_uint8, 1, 0, sim.buffer_base64)
originalBuffer = sim.transformBuffer(base64Buffer, sim.buffer_base64, 1, 0, sim.buffer_uint8)

# Packing/unpacking random data, in CoppeliaSim format:
data = [1, 'hello', {'value': 'world'}, [1, [2, 3]]]
binaryPackedData = sim.packTable(data)
data = sim.unpackTable(binaryPackedData)</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

-- Packing/unpacking specific type of data:
local data = {1, 2, 3}
local binaryPackedData = sim.packDoubleTable(data) -- binary packing
data = sim.unpackDoubleTable(binaryPackedData) -- binary unpacking

base16 = require('base16')
local base16PackedData = base16.encode(binaryPackedData) -- base16 encoding
binaryPackedData = base16.decode(base16PackedData) -- base16 decoding

base64 = require('base64')
local base64PackedData = base64.encode(binaryPackedData) -- base64 encoding
binaryPackedData = base64.decode(base64PackedData) -- base64 decoding

local base64Buffer = sim.transformBuffer(binaryPackedData, sim.buffer_uint8, 1, 0, sim.buffer_base64)
local originalBuffer = sim.transformBuffer(base64Buffer, sim.buffer_base64, 1, 0, sim.buffer_uint8)


-- Packing/unpacking random data:
local data = {1, 'hello', {value = 'world'}, {1, {2, 3}}}
local binaryPackedData = sim.packTable(data) -- binary packing
data = sim.unpackTable(binaryPackedData) -- binary unpacking

cbor = require('org.conman.cbor')
local cborPackedData = cbor.encode(data) -- cbor encoding
data = cbor.decode(cborPackedData) -- cbor decoding</code>

</div>
  
<p>More packing/unpacking functions can be found <a href="apiFunctions.htm#packing">here</a>.</p>

<br>
<p><a name="algebra"></a>Following example illustrates usage of linear algebra functionality:</p>
  
<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

# Refer to the numpy package for instance:
import numpy</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

-- Get the absolute transformation matrices of an object and its parent:
local absObj = Matrix4x4:frompose(sim.getObjectPose(objectHandle))
local absParentObj = Matrix4x4:frompose(sim.getObjectPose(parentHandle))

-- Compute the relative transformation matrix of the object:
local relObj = Matrix4x4:inv(absParentObj) * absObj

-- Get the relative transformation matrix of the object directly:
local relObj2 = Matrix4x4:frompose(sim.getObjectPose(objectHandle, parentHandle))

-- Check that both matrices are same:
print(relObj:sub(relObj2):abs():max())</code>

</div>

<p>The documentation for the linear algebra functionality for Lua can be found <a href="https://github.com/CoppeliaRobotics/lua/blob/master/matrix.md" target="_blank">here</a>.</p>


  

<br>
<br>

 </tr>
</table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
