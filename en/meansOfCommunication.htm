<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>messaging/interfaces/connectivity</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Messaging/interfaces/connectivity</h1>

<p>There are several ways messages or data can be exchanged/transmitted/received in and around CoppeliaSim, but also between CoppeliaSim and an external application, other computer, machine, etc.:</p>
<p> One can send/receive data via:</p>
<li><a name="signals"></a><a href="properties.htm#signals">signals</a></li>
<li><a name="customData"></a><a name="customDataBlocks"></a><a href="properties.htm#customData">custom data</a></li>
<li><a href="#pluginFunctions">calling plugin functions</a></li>
<li><a href="#simCallScriptFunction">calling script functions</a></li>
<li><a href="remoteApiOverview.htm">Remote API</a></li>
<li><a href="#simBroadcastMsg">broadcasting a message</a></li>
<li><a href="#events">events</a></li>
<li><a href="rosInterfaces.htm">ROS</a></li>
<li><a href="#zmq">ZeroMQ</a></li>
<li><a href="#ws">WebSocket</a></li>
<li><a href="#serialPort">serial port</a></li>
<li><a href="#sockets">sockets</a></li>
<li><a href="#other">other</a></li>

<br>
<br>

<h2>
<a name="callingPluginFunctions"></a><a name="pluginFunctions"></a>Calling plugin functions
</h2>


<p><a href="scripts.htm">Scripts</a> can call specific <a href="plugins.htm">plugin</a> functions, so-called callback functions: in order to be able to do this, the plugin must  first register its callback functions via <a href="apiFunctions.htm#customScriptFunctions">simRegisterScriptFunction</a>. This is a convenient mechanism to extend CoppeliaSim's functionality, but can also be used for complex data exchange between scripts and plugins. Following illustrates a very simple plugin function and its registration:</p>

<code class="hljs language-c++ coppelia-coppeliasim-plugin">void myCallbackFunc(SScriptCallBack* p)
{
    int stack = p -&gt; stackID;
    CStackArray inArguments;
    inArguments.buildFromStack(stack);
    
    if ( (inArguments.getSize() > 0) &amp;&amp; inArguments.isString(0) )
    {
        std::string tmp(&quot;we received a string: &quot;);
        tmp += inArguments.getString(0);
        simAddLog(&quot;ABC&quot;, sim_verbosity_msgs,tmp.c_str());
        
        CStackArray outArguments;
        outArguments.pushString(&quot;Hello to you too!&quot;);
        outArguments.buildOntoStack(stack);
    }
    else
        simSetLastError(nullptr, &quot;Not enough arguments or wrong arguments.&quot;);
}

// Somewhere in the plugin's initialization code:
simRegisterScriptCallbackFunction(&quot;func&quot;, nullptr, myCallbackFunc);</code>



<br>


<h2><a name="simCallScriptFunction"></a><a name="simCallScriptFunctionEx"></a>Calling script functions
</h2>


<p>A <a href="scripts.htm">script</a> function can obviously be called from within the same script, but also:</p>
<li>across scripts (via <a href="regularApi/simCallScriptFunction.htm">sim.callScriptFunction</a> or <a href="regularApi/simGetScriptFunctions.htm">sim.getScriptFunctions</a>)</li>
<li>from a plugin (via <a href="regularApi/simCallScriptFunctionEx_cpp.htm">simCallScriptFunctionEx</a>)</li>
<li>from a <a href="rosInterfaces.htm">ROS</a> client (via a callback mechanism)
<li>or from a <a href="remoteApiOverview.htm">remote API</a> client</li>
<p>The called script function can perform various tasks, then send back data to the caller. This is also a simple way to extend the functionality of an external application in a quick manner. It is however important that the called script doesn't perform lengthly tasks, otherwise everything will come to a halt (lengthly tasks should rather be triggered externally, and processed at an appropriate moment by the script itself when called from the regular <a href="callbackFunctions.htm">system callbacks</a>).</p>




<br>


<h2><a name="simBroadcastMsg"></a>Broadcasting messages
</h2>


<p>A <a href="scripts.htm">script</a> or a <a href="remoteApiOverview.htm">remote API</a> client can broadcast a message to all scripts at once, via the <a href="regularApi/simBroadcastMsg.htm">sim.broadcastMsg</a> function. For instance, following will constantly broadcast a message to all scripts:</p>
<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_init():
    sim = require('sim')
    self.objectHandle = sim.getObject('.')

def sysCall_sensing():
    message = {'id': 'greetingMessage', 'data': {'msg': 'Hello!'}}
    sim.broadcastMsg(message)

def sysCall_msg(msg, origin):
    if origin != self.objectHandle and msg.id == 'greetingMessage':
        print("Received following message from script {}:".format(origin))
        print(msg['data']['msg'])</code>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    sim = require('sim')
    scriptHandle = sim.getObject('.')
end

function sysCall_sensing()
    local message = {id = 'greetingMessage', data = {msg = 'Hello!'}}
    sim.broadcastMsg(message)
end

function sysCall_msg(msg, origin)
    if origin ~= scriptHandle and msg.id == 'greetingMessage' then
        print(string.format("Received following message from script %i:", origin))
        print(msg.data.msg)
    end
end</code>

</div>
<br>




<h2><a name="events"></a>Events</h2>


<p>A <a href="scripts.htm">script</a> or a <a href="plugins.htm">plugin</a> can receive notifications for everything that happens in CoppeliaSim itself, e.g. when an object is created, modified, removed, or when an internal state changed. A script can use the sysCall_event <a href="callbackFunctions.htm">callback function</a> to that end, coupled with some filtering for efficiency's sake. For instance, following script tracks a pose change with any scene object, and a change in scene object selection:</p>
<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python
#luaExec eventCallback = true      -- enable event callback

import cbor2 as cbor

def sysCall_init():
    sim = require('sim')
    filters = {}
    filters[sim.handle_sceneobject] = ['pose']
    filters[sim.handle_scene] = ['selectionHandles']
    sim.setEventFilters(filters)

def sysCall_event(events):
    ev = cbor.loads(events)
    print(ev)</code>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    sim = require('sim')
    cbor = require('org.conman.cbor')
    local filters = {}
    filters[sim.handle_sceneobject] = {'pose'}
    filters[sim.handle_scene] = {'selectionHandles'}
    sim.setEventFilters(filters)
end

function sysCall_event(events)
    local ev = cbor.decode(events)
    print(ev)
end</code>

</div>
<p>Most <a href="properties.htm">properties</a> generate an event when changed (i.e. modified explicitly or internally by CoppeliaSim). See also the event viewer add-on located at [Modules &gt; Developer tools &gt; Event viewer].</p>
<br>




<h2><a name="zmq"></a>ZMQ
</h2>


<p>The <a href="http://api.zeromq.org/" target="_blank">ZeroMQ library</a>, wrapped inside the <a href="https://github.com/CoppeliaRobotics/simZMQ" target="_blank">ZMQ plugin</a>, offers several <a href="simZMQ.htm">API functions related to ZeroMQ messaging</a>. When using Python, one is of course also free to using the pyzmq package for the ZeroMQ functionality. Following illustrates a simple requester:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_thread():
    sim = require('sim')
    simZMQ = require('simZMQ') # suppose we do not use the pyzmq package
    print('Connecting to hello world server...')
    self.context = simZMQ.ctx_new()
    self.requester = simZMQ.socket(self.context, simZMQ.REQ)
    simZMQ.connect(self.requester, 'tcp://localhost:5555')

    for request_nbr in range(11):
        print('-----------------------------------------')
        data = 'Hello'
        print(f'[requester] Sending "{data}"...')
        simZMQ.send(self.requester, data, 0)
        rc, data = simZMQ.recv(self.requester, 0)
        print(f'[requester] Received "{data}"')

def sysCall_cleanup():
    simZMQ.close(self.requester)
    simZMQ.ctx_term(self.context)</code>
    
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_thread()
    sim = require('sim')
    simZMQ = require('simZMQ')
    print('Connecting to hello world server...')
    context = simZMQ.ctx_new()
    requester = simZMQ.socket(context, simZMQ.REQ)
    simZMQ.connect(requester, 'tcp://localhost:5555')

    for request_nbr = 0, 10 do
        print('-----------------------------------------')
        local data = 'Hello'
        printf('[requester] Sending "%s"...', data)
        simZMQ.send(requester, data, 0)
        local rc, data = simZMQ.recv(requester, 0)
        printf('[requester] Received "%s"', data)
    end
end

function sysCall_cleanup()
    simZMQ.close(requester)
    simZMQ.ctx_term(context)
end</code>
</div>

<p>And following would be the corresponding responder:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_thread():
    sim = require('sim')
    simZMQ = require('simZMQ') # suppose we do not use the pyzmq package
    self.context = simZMQ.ctx_new()
    self.responder = simZMQ.socket(self.context, simZMQ.REP)
    rc = simZMQ.bind(self.responder, 'tcp://*:5555')
    if rc != 0:
        raise Exception('failed bind')
    
    while True:
        rc, data = simZMQ.recv(self.responder, 0)
        print(f'[responder] Received "{data}"')
        data = 'World'
        print(f'[responder] Sending "{data}"...')
        simZMQ.send(self.responder, data, 0)

def sysCall_cleanup():
    simZMQ.close(self.responder)
    simZMQ.ctx_term(self.context)</code>
    
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_thread()
    sim = require('sim')
    simZMQ = require('simZMQ')
    context = simZMQ.ctx_new()
    responder = simZMQ.socket(context, simZMQ.REP)
    local rc = simZMQ.bind(responder, 'tcp://*:5555')
    if rc ~= 0 then
        error('failed bind')
    end
    
    while true do
        local rc, data = simZMQ.recv(responder, 0)
        printf('[responder] Received "%s"', data)
        data = 'World'
        printf('[responder] Sending "%s"...', data)
        simZMQ.send(responder, data, 0)
    end
end

function sysCall_cleanup()
    simZMQ.close(responder)
    simZMQ.ctx_term(context)
end</code>

</div>
<br>

<h2><a name="ws"></a>WebSocket
</h2>
<p>The <a href="https://github.com/CoppeliaRobotics/simWS" target="_blank">WebSocket plugin</a>, offers several <a href="simWS.htm">API functions allowing to interact with a web browser</a>. When using Python, one is of course also free to using a Python specific WS package. Following is a simple echo server:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def onMessage(server, connection, data):
    simWS.send(server, connection, data)

def sysCall_init():
    simWS = require('simWS') # suppose one is not using any specific Python package related to WS
    server = simWS.start(9000)
    simWS.setMessageHandler(server, 'onMessage')</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function onMessage(server, connection, data)
    simWS.send(server, connection, data)
end

function sysCall_init()
    simWS = require('simWS')
    server = simWS.start(9000)
    simWS.setMessageHandler(server, 'onMessage')
end</code>
</div>
<p>And following is a simple broadcaster:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def onOpen(server, connection):
    if server not in clients:
        clients[server] = {}
    clients[server][connection] = 1

def onClose(server, connection):
    del clients[server][connection]

def broadcast(server, data):
    for connection in clients.get(server, {}):
        simWS.send(server, connection, data)

def sysCall_init():
    simWS = require('simWS') # suppose one is not using any specific Python package related to WS
    clients = {}
    server = simWS.start(9000)
    simWS.setOpenHandler(server, onOpen)
    simWS.setCloseHandler(server, onClose)</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function onOpen(server, connection)
    clients[server] = clients[server] or {}
    clients[server][connection] = 1
end

function onClose(server, connection)
    clients[server][connection] = nil
end

function broadcast(server, data)
    for connection, _ in pairs(clients[server] or {}) do
        simWS.send(server, connection, data)
    end
end

function sysCall_init()
    simWS = require('simWS')
    clients = {}
    server = simWS.start(9000)
    simWS.setOpenHandler(server, 'onOpen')
    simWS.setCloseHandler(server, 'onClose')
end</code>
</div>

<br>

<h2>
<a name="serialPort"></a>Serial port</a>
</h2>


<p>CoppeliaSim implements several <a href="apiFunctions.htm#serialPort">serial port API functions</a> for Lua. With Python, use the <a href="https://pypi.org/project/pyserial/" target="_blank">Python serial port package</a>.</p>
<br>

<h2>
<a name="sockets"></a>Sockets
</h2>


<p>CoppeliaSim ships with the <a href="http://w3.impa.br/~diego/software/luasocket/home.html" target="_blank">LuaSocket</a> extension library for Lua, while several packages are available for Python. Following illustrates how to fetch a webpage:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

import requests
response = requests.get('http://www.google.com')
page = response.text</code>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

http = require('socket.http')
page = http.request('http://www.google.com')</code>
</div>

<br>


<h2>
<a name="other"></a>Other
</h2>


<p>Many other means of communication can be directly supported from within a script, via a Lua extension library or via a Python package. Indirectly, by passing via a <a href="plugins.htm">plugin</a>, there are even more possibilities, since a plugin can virtually link to any type of c/c++ communication library.</p>


<br>
<br>
 </tr>
</table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
