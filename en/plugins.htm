<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Plugins</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Plugins</h1>

<p>A CoppeliaSim plugin is a shared library that can be loaded via the  <a href="regularApi/loadPlugin.htm">loadPlugin </a>API function, on demand. It allows CoppeliaSim's functionality to be extended by user-written functions (in a similar way as with <a href="addOns.htm">add-ons</a>). The language can be any language able to generate a shared library and able to call exported C-functions.<br>
</p>

<p>Plugins are usually used to customize the simulator and/or a particular simulation. Often, plugins are only used to provide a simulation with <a href="apiFunctions.htm#customizingLuaFunctions">custom script commands</a>, and so are used in conjunction with <a href="scripts.htm">scripts</a>. Other times, plugins are used to provide CoppeliaSim with a special functionality requiring either fast calculation capability (scripts are most of the times slower than compiled languages) or an interface to a hardware device (e.g. a real robot).<br>
</p>

<p>Each plugin is required to have at least the <em>simInit</em> entry point, other entry points are optional:<br>
</p>

<code class="hljs language-c++ coppelia-coppeliasim-plugin">#include &lt;simLib/simExp.h&gt;
#include &lt;simLib/simTypes.h&gt;

SIM_DLLEXPORT int simInit(SSimInit* info);
SIM_DLLEXPORT void simMsg(SSimMsg* info);
SIM_DLLEXPORT void simCleanup();

SIM_DLLEXPORT void simInit_ui(); // called immediately after simInit
SIM_DLLEXPORT void simMsg_ui(SSimMsg_ui* info);
SIM_DLLEXPORT void simCleanup_ui(); // called immediately before simCleanup</code>

<p>*_ui entry points are exclusively called by the UI thread, while the other entry points are called by the simulation thread. </p>
<p>A plugin shoud be named &quot;sim&lt;name&gt;-&lt;version&gt;&quot; (with the version information being optional), e.g. &quot;simIK-2-1&quot; for the name and &quot;libsimIK-2-1.so&quot; for the file on Linux. The plugin should be placed in <em>&lt;coppeliaSim executable&gt;</em>. It can then be loaded via Lua with e.g.:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

simIK = loadPlugin('simIK-2-1')</code>



<p> It is however good practice and more flexible to wrap the load procedure inside of a module of its own, e.g.:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">--lua

local simIK = loadPlugin('simIK-2-1')

function simIK.anotherFunction()
    print('a pure Lua function')
end

return simIK</code>

<p>Above module should have the same name as the plugin it is loading (e.g. "simIK-2-1.lua") and placed in <em>&lt;coppeliaSim executable&gt;/lua</em>. From a script (Python or Lua), the desired functionality, including version, can then be loaded with e.g.:</p>

<div class="multi-language-switcher">

<code class="hljs language-python coppelia-coppeliasim-script">#python

def sysCall_init():
    simIK = require('simIK-2-1')</code>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

function sysCall_init()
    simIK = require('simIK-2-1')
end</code>
</div>

<p>For more information on plugins, refer to following  repositories: </p>

<li><a href="https://github.com/CoppeliaRobotics/simSkeleton" target="_blank">simSkeleton</a>: represents a plugin template that is easy to understand. Convenient for small projects.</li>

<li><a href="https://github.com/CoppeliaRobotics/simSkel" target="_blank">simSkel</a>: similar to simSkeleton above, but where a lot of redundant code is automatically generated. Ideal for larger projects.</li>

<li><a href="https://github.com/CoppeliaRobotics/simVision" target="_blank">simVision</a>: a plugin that handles specific vision tasks (e.g. simulation of LIDAR sensors, or simulation of an omnidirectional camera).<br>
</li>

<li><a href="https://github.com/CoppeliaRobotics/simBubble" target="_blank">simBubble</a>: illustrates how to add customized script functions and how to handle several specific <a href="models.htm">models</a>. Refer also to the <a href="pluginTutorial.htm">related plugin tutorial</a>.<br>
</li>

<li><a href="https://github.com/CoppeliaRobotics/simROS" target="_blank">simROS</a>: the ROS package allowing you to build the <a href="rosInterf.htm">ROS Interface</a> for CoppeliaSim. </li>

<li><a href="https://github.com/CoppeliaRobotics/simROS2" target="_blank">simROS2</a>: the ROS 2 package allowing you to build the <a href="ros2Interface.htm">ROS 2 Interface</a> for CoppeliaSim.</li>

<li><a href="https://github.com/CoppeliaRobotics/simMTB" target="_blank">simMTB</a>: illustrates a Qt plugin which  integrates a robot language interpreter (or other emulator) into CoppeliaSim. Refer also to its <a href="robotLanguageIntegrationTutorial.htm">related tutorial</a>.
</li>
<br>
<p>CoppeliaSim plugins may be published under any license.</p>
<br>
<br>
 </tr>
</table> 
</div>  
  
  
<link rel="stylesheet" href="../js/hljs/11.8.0/styles/default.min.css" />
<script src="../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>

</html>
