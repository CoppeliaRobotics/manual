<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simExportMesh <small>(in <a href="../apisOverview.htm">sim-1</a>)</small></title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<div class="regApiSection">
    <h2>simExportMesh <small>(in <a href="../apisOverview.htm">sim-1</a>)</small></h2>
    <p>Exports a mesh to a file</p>
</div>

<div class="regApiSection">
    <h3>C++ synopsis</h3>
    <code class="hljs language-c++ coppelia-coppeliasim-plugin">int simExportMesh(int fileformat, const char* pathAndFilename, int options, double scalingFactor, 
                  int elementCount, double** vertices, const int* verticesSizes, int** indices, 
                  const int* indicesSizes, double** reserved, char** names)</code>
</div>

<div  class="regApiSection">
    <h3>Arguments</h3>
    
            <ul>
                <li><strong>fileformat</strong>: the fileformat to export to:
                    <ul>
                        <li>0: OBJ format</li>
                        <li>3: TEXT STL format</li>
                        <li>4: BINARY STL format</li>
                        <li>5: COLLADA format</li>
                        <li>6: TEXT PLY format</li>
                        <li>7: BINARY PLY format</li>
                    </ul>
                </li>
                <li><strong>pathAndFilename</strong>: the location of the file to create.</li>
                <li><strong>options</strong>: keep at 0</li>
                <li><strong>scalingFactor</strong>: the scaling factor to apply to the vertices to export</li>
                <li><strong>elementCount</strong>: the number of meshes</li>
                <li><strong>vertices</strong>: an array to vertice arrays. See the example below</li>
                <li><strong>verticesSizes</strong>: an array indicating the individual vertice array sizes. See the example below</li>
                <li><strong>indices</strong>: an array to indice arrays. See the example below</li>
                <li><strong>indicesSizes</strong>: an array indicating the individual indice array sizes. See the example below</li>
                <li><strong>reserved</strong>: reserved for future extensions. Keep at nullptr.</li>
                <li><strong>names</strong>: Keep at nullptr</li>
            </ul>
        
</div>

<div  class="regApiSection">
    <h3>Return</h3>
    
            <ul>
                <li>-1 if operation was not successful</li>
            </ul>
        
</div>

<div class="regApiSection">

            <h3>Example</h3>
            <code class="hljs language-c++ coppelia-coppeliasim-plugin">// Exports all shapes in the scene
int shapeCount = 0;
while (simGetObjects(shapeCount++, sim.sceneobject_shape) != -1);
shapeCount--;
double** vertices = new double*[shapeCount];
int* verticesSizes = new int[shapeCount];
int** indices = new int*[shapeCount];
int* indicesSizes = new int[shapeCount];
int index = 0;
while (true)
{
    int shapeHandle = simGetObjects(index++, sim.sceneobject_shape);
    if (shapeHandle &lt; 0)
        break;
    double* vert;
    int vertS;
    int* ind;
    int indS;
    simGetShapeMesh(shapeHandle, &amp;vert, &amp;vertS, &amp;ind, &amp;indS, nullptr);
    vertices[index - 1] = vert;
    verticesSizes[index - 1] = vertS;
    indices[index - 1] = ind;
    indicesSizes[index - 1] = indS;
    double m[12];
    simGetObjectMatrix(shapeHandle, -1, m);
    for (int i = 0; i &lt; vertS / 3; i++)
    {
        double v[3]={vert[3 * i + 0], vert[3 * i + 1], vert[3 * i + 2]};
        simTransformVector(m, v);
        vert[3 * i + 0] = v[0];
        vert[3 * i + 1] = v[1];
        vert[3 * i + 2] = v[2];
    }
}

simExportMesh(0, "d:\\example.obj", 0, 1, shapeCount, vertices,
                 verticesSizes, indices, indicesSizes, nullptr, nullptr);
for (int i = 0; i &lt; shapeCount; i++)
{
    simReleaseBuffer((char*)vertices[i]);
    simReleaseBuffer((char*)indices[i]);
}

delete[] vertices;
delete[] verticesSizes;
delete[] indices;
delete[] indicesSizes;</code>
        
</div>

<p><br>See also:
<ul>
<li><a href="simImportMesh_cpp.htm">simImportMesh</a></li>
<li><a href="simGetShapeMesh_cpp.htm">simGetShapeMesh</a></li>
</ul>
</p>

</td>
</tr>
</table>
</div>
<link rel="stylesheet" href="../../js/hljs/11.8.0/styles/default.min.css" />
<script src="../../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>
</html>
