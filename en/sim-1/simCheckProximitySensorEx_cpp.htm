<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simCheckProximitySensorEx</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<div class="regApiSection">
    <h2>simCheckProximitySensorEx <small>(in <a href="../apisOverview.htm" style="color: blue;">sim-1</a>)</small></h2>
    <p>Deprecated. See simCheckProximitySensor instead</p>
</div>

<div class="regApiSection">
    <h3>C++ synopsis</h3>
    <code class="hljs language-c++ coppelia-coppeliasim-plugin">int simCheckProximitySensorEx(int sensorHandle, int entityHandle, int detectionMode, 
                              double detectionThreshold, double maxAngle, double* detectedPoint, 
                              int* detectedObjectHandle, double* surfaceNormalVector)</code>
</div>

<div  class="regApiSection">
    <h3>Arguments</h3>
    
            <ul>
                <li><strong>sensorHandle</strong>: handle of the proximity sensor object</li>
                <li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
                <li><strong>detectionMode</strong>: bit coded: bit0 (1) for front face detection, bit1 (2) for back face detection (bit0|bit1 needs to be true), bit2 (4) for fast detection (doesn't search for the closest point, just any point in the detection volume), bit3 (8) for limited angle detection (if set, maxAngle is taken into account).</li>
                <li><strong>detectionThreshold</strong>: doesn't detect objects farther than detectionThreshold distance from sensor origin</li>
                <li><strong>maxAngle</strong>: maximum detection angle (angle between detection ray and normal vector of the surface). Can be (0;pi/2). Only if bit3 of detectionMode is set will this parameter have an effect. Use this to realistically simulate ultrasonic sensors.</li>
                <li><strong>detectedPoint</strong>: coordinates of detected point relative to the sensor origin (detectedPoint[0]-detectedPoint[2]), and distance of detected point to the sensor origin (detectedPoint[3]). Can be nullptr</li>
                <li><strong>detectedObjectHandle</strong>: handle of detected object (useful when entity to be detected is a collection or sim.handle_all). Can be nullptr</li>
                <li><strong>surfaceNormalVector</strong>: normal vector of the surface where the point was detected. Normalized. Relative to the sensor reference frame. Can be nullptr</li>
            </ul>
        
</div>

<div  class="regApiSection">
    <h3>Return</h3>
    
            <ul>
                <li>-1 if operation was not successful, otherwise 0 (no detection) or 1 (detection)</li>
            </ul>
        
</div>

<div class="regApiSection">

</div>

<p><br>See also:
<ul>
<li><a href="simReadProximitySensor_cpp.htm">simReadProximitySensor</a></li>
<li><a href="simCheckProximitySensorEx2_cpp.htm">simCheckProximitySensorEx2</a></li>
</ul>
</p>

</td>
</tr>
</table>
</div>
<link rel="stylesheet" href="../../js/hljs/11.8.0/styles/default.min.css" />
<script src="../../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>
</html>
