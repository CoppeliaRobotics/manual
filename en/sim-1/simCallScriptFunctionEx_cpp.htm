<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simCallScriptFunctionEx <small>(in <a href="../apisOverview.htm">sim-1</a>)</small></title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<div class="regApiSection">
    <h2>simCallScriptFunctionEx <small>(in <a href="../apisOverview.htm">sim-1</a>)</small></h2>
    <p>Calls a script function (from a <a href="../plugins.htm">plugin</a>,
<a href="../mainClientApplication.htm">the main client application</a>, or from another script). This
represents a <a href="../callbackFunctions.htm">user callback</a> inside of a script. The target script
must be initialized for this call to succeed, e.g. when calling <a href="../simulationScripts.htm">simulation scripts</a>,
then simulation must be running
<br />
            <br />
Data exchange between a plugin and a script happens via a <a href="../apiFunctions.htm#stacks">stack</a>. Reading and writing arguments from/to the stack gives you a maximum of flexibility, and you wil be able to exchange also complex data structures. But it can also be tedious and error prone. Use instead the helper classes located in <em>programming/include/simStack</em>: they will greatly simplify the task. Have a look at the example plugins <a href="https://github.com/CoppeliaRobotics/simSkeleton" target="_blank">simSkeleton</a> and <a href="https://github.com/CoppeliaRobotics/simSkel" target="_blank">simSkel</a>
        </p>
</div>

<div class="regApiSection">
    <h3>C++ synopsis</h3>
    <code class="hljs language-c++ coppelia-coppeliasim-plugin">int simCallScriptFunctionEx(int scriptHandle, const char* functionName, 
                            int stackId)</code>
</div>

<div  class="regApiSection">
    <h3>Arguments</h3>
    
            <ul>
                <li><strong>scriptHandle</strong>: the handle of the script, or -1 for the sandbox script, or -2 for the main script</li>
                <li><strong>functionName</strong>: the function to call.</li>
                <li><strong>stackId</strong>: a <a href="simCreateStack_cpp.htm">stack handle</a>. The stack represents the function's in/out values. See also the <a href="../apiFunctions.htm#stacks">available stack functions</a>.</li>
            </ul>
        
</div>

<div  class="regApiSection">
    <h3>Return</h3>
    
            <ul>
                <li>-1 in case of an error</li>
            </ul>
        
</div>

<div class="regApiSection">

</div>

<p><br>See also:
<ul>
<li><a href="simExecuteScriptString_cpp.htm">simExecuteScriptString</a></li>
<li><a href="simGetScriptHandleEx_cpp.htm">simGetScriptHandleEx</a></li>
</ul>
</p>

</td>
</tr>
</table>
</div>
<link rel="stylesheet" href="../../js/hljs/11.8.0/styles/default.min.css" />
<script src="../../js/hljs/11.8.0/highlight.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cmake.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/cpp.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/java.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/javascript.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/lua.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/matlab.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/python.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/rust.min.js"></script>
<script src="../../js/hljs/11.8.0/languages/xml.min.js"></script>
<script src="../../js/multi-language-switcher.js"></script>
<script>document.querySelectorAll('code.hljs').forEach(el => {hljs.highlightElement(el);})</script>
</body>
</html>
