<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Simulation scripts</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Simulation scripts <img src="images/childScripts1.jpg"></h1>

<p>A simulation script executes code handling a particular function in a <a href="simulation.htm">simulation</a>. Double-clicking the script icon opens the <a href="scriptEditor.htm">script editor</a>. </p>
<p>Simulation scripts should exclusively be used to handle simulation-time tasks, since they only run when simulation is running. Their entrance functions are <a href="callbackFunctions.htm"> callback functions</a>. Functions that are not <a href="threadedAndNonThreadedCode.htm#threaded">running threaded</a> should not be blocking. This means that every time they are called, they should perform some task and then return control. If control is not returned, then the whole <a href="simulation.htm">simulation</a> halts. Simulation script functions are called at least twice per simulation step from <a href="mainScript.htm">the main script</a>'s actuation and sensing functions. The system will also call other <a href="callbackFunctions.htm#systemCallbacks">system callback functions</a> where appropriate (e.g. during script initialization, clean-up, etc). </p>
<p>Simulation scripts follow a <a href="scriptExecution.htm">precise calling or execution order</a> and are typically segmented into <a href="callbackFunctions.htm#systemCallbacks">system callback functions</a>, the most important ones are: </p>
<li><strong>sysCall_init</strong>. This function is executed just one time, the first time the script is called. Usually you would put some initialization code in this part.
</li>

<li><strong>sysCall_thread</strong>. This function is the entrance to the script's threaded execution code. Threaded code is interrupted (and later resumed) on a regular basis by CoppeliaSim, by default. This behaviour can however be adjusted via <a href="sim/simSetStepping.htm">sim.setStepping</a>. See also <a href="apiFunctions.htm#threads">the other thread-related API functions</a> for more details. </li>

<li><strong>sysCall_actuation</strong>. This function is executed in each simulation step, during the actuation phase of a simulation step. Refer to the <a href="mainScript.htm">main script</a> default code for more details about the actuation phase, but typically, you would do some actuation in this part (no sensing).<br>
</li>

<li><strong>sysCall_sensing</strong>. This function is executed in each simulation step, during the sensing phase of a simulation step. Refer to the <a href="mainScript.htm">main script</a> default code for more details about the sensing phase, but typically, you would only do sensing in this part (no actuation).<br>
</li>

<li><strong>sysCall_cleanup</strong>. This function is executed one time just before  the script state is destroyed (e.g. when simulation ends, or when the script is removed). </li>



<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
