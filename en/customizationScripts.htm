<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Customization scripts</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Customization scripts <img src="images/customizationScriptIcon.jpg"></h1>

<p>A customization script can be used to customize a simulation <a href="scenes.htm">scene</a> or <a href="models.htm">model</a> to a great extent:  imagine a model that was dropped into a scene and that is able to configure or adapt itself, even when simulation is not running. This could be a robot where the user can adjust the various link lengths with a single slider repositioning. </p>

<p>Customization scripts are executed all the time (within a same scene): when simulation is running, as well as when simulation is not running. They follow a <a href="scriptExecution.htm">precise calling or execution order</a> and  can <a href="threadedAndNonThreadedCode.htm">run threaded or non-threaded</a>. Double-clicking their icon in the scene hierarchy opens the <a href="scriptEditor.htm">script editor</a>.</p>
<p>A customization script is typically segmented into <a href="callbackFunctions.htm#systemCallbacks">system callback functions</a>, the most important ones are: </p>
<li><strong>sysCall_init</strong>. This function is executed just one time, the first time the script is called. Usually you would put some initialization code in this part.
</li>

<li><strong>sysCall_thread</strong>. This function is the entrance to the script's threaded execution code. Threaded code is interrupted (and later resumed) on a regular basis by CoppeliaSim, by default. This behaviour can however be adjusted via <a href="sim/simSetStepping.htm">sim.setStepping</a>. See also <a href="apiFunctions.htm#threads">the other thread-related API functions</a> for more details. </li>

<li><strong>sysCall_nonSimulation</strong>. This function is executed on a regular basis, when simulation is not running.<br>
</li>

<li><strong>sysCall_beforeSimulation</strong>. This function is executed once just before simulation starts.<br>
</li>


<li><strong>sysCall_afterSimulation</strong>. This function is executed once just after simulation ended. </li>

<li><strong>sysCall_cleanup</strong>. This function is executed one time just before  the script state is destroyed (e.g. when the script is removed)</li>


<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
